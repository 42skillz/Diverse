<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Diverse</name>
    </assembly>
    <members>
        <member name="T:Diverse.Address.Address">
            <summary>
            Address of a <see cref="T:Diverse.Person"/>.
            </summary>
        </member>
        <member name="P:Diverse.Address.Address.StreetNumber">
            <summary>
            Gets or sets the number for this apartment/condo/house in the street.
            </summary>
        </member>
        <member name="P:Diverse.Address.Address.StreetName">
            <summary>
            Gets or sets the street name.
            </summary>
        </member>
        <member name="P:Diverse.Address.Address.ZipCode">
            <summary>
            Gets or sets the Zip code.
            </summary>
        </member>
        <member name="P:Diverse.Address.Address.Street">
            <summary>
            Gets or sets the street part of the address. By default, this includes the <see cref="P:Diverse.Address.Address.StreetNumber"/>
            and the <see cref="P:Diverse.Address.Address.StreetName"/>.
            </summary>
        </member>
        <member name="P:Diverse.Address.Address.City">
            <summary>
            Gets or sets the City.
            </summary>
        </member>
        <member name="P:Diverse.Address.Address.StateProvinceArea">
            <summary>
            Gets or sets the State/Province/Area.
            </summary>
        </member>
        <member name="P:Diverse.Address.Address.CountryLabel">
            <summary>
            Gets or sets the Country.
            </summary>
        </member>
        <member name="P:Diverse.Address.Address.Country">
            <summary>
            Gets or sets the Country.
            </summary>
        </member>
        <member name="M:Diverse.Address.Address.#ctor(System.String,System.String,System.String,System.String,Diverse.Address.Geography.StateProvinceArea,Diverse.Address.Geography.Country)">
            <summary>
            Instantiates an <see cref="T:Diverse.Address.Address"/>.
            </summary>
            <param name="streetNumber">The street number</param>
            <param name="streetName">The street name</param>
            <param name="city">The city</param>
            <param name="zipCode">The zip code</param>
            <param name="stateProvinceArea">The <see cref="P:Diverse.Address.Address.StateProvinceArea"/></param>
            <param name="country">The <see cref="P:Diverse.Address.Address.Country"/></param>
        </member>
        <member name="M:Diverse.Address.Address.ToString">
            <summary>
            Returns the string description of a <see cref="T:Diverse.Address.Address"/>.
            </summary>
            <returns>The string description of a <see cref="T:Diverse.Address.Address"/>.</returns>
        </member>
        <member name="T:Diverse.Address.AddressFormat">
            <summary>
            Format of an <see cref="T:Diverse.Address.Address"/>.
            </summary>
        </member>
        <member name="F:Diverse.Address.AddressFormat.French">
            <summary>
            French address format.
            </summary>
        </member>
        <member name="F:Diverse.Address.AddressFormat.China">
            <summary>
            Chinese address format.
            </summary>
        </member>
        <member name="T:Diverse.Address.AddressFuzzer">
            <summary>
            Fuzz <see cref="T:Diverse.Address.Address"/>.
            </summary>
        </member>
        <member name="M:Diverse.Address.AddressFuzzer.#ctor(Diverse.IFuzz)">
            <summary>
            Instantiates a <see cref="T:Diverse.Address.AddressFuzzer"/>.
            </summary>
            <param name="fuzzer">Instance of <see cref="T:Diverse.IFuzz"/> to use.</param>
        </member>
        <member name="M:Diverse.Address.AddressFuzzer.GenerateAddress(System.Nullable{Diverse.Address.Geography.Country})">
            <summary>
            Randomly generates an <see cref="T:Diverse.Address.Address"/>.
            </summary>
            <param name="country">The <see cref="T:Diverse.Address.Geography.Country"/> of the address to generate.</param>
            <returns>The generated Address.</returns>
        </member>
        <member name="T:Diverse.Address.CountryCallingCode">
            <summary>
            International Telecommunication Union (ITU) Calling code for a Country.
            </summary>
        </member>
        <member name="P:Diverse.Address.CountryCallingCode.Prefix">
            <summary>
            Prefix for this ITU calling code.
            </summary>
        </member>
        <member name="P:Diverse.Address.CountryCallingCode.Code">
            <summary>
            Code for the Country.
            </summary>
        </member>
        <member name="M:Diverse.Address.CountryCallingCode.#ctor(System.Int32,System.String)">
            <summary>
            Instantiates a <see cref="T:Diverse.Address.CountryCallingCode"/>.
            </summary>
            <param name="code">Code of the country.</param>
            <param name="prefix">Prefix for this Country ITU.</param>
        </member>
        <member name="M:Diverse.Address.CountryCallingCode.ToString">
            <summary>
            Returns the string description of a <see cref="T:Diverse.Address.CountryCallingCode"/>.
            </summary>
            <returns>The string description of a <see cref="T:Diverse.Address.CountryCallingCode"/>.</returns>
        </member>
        <member name="T:Diverse.Address.Geography.Countries.China">
            <summary>
            Provides samples of what could be find in <see cref="F:Diverse.Address.Geography.Country.China"/>.
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.Countries.China.Cities">
            <summary>
            Gets the list of <see cref="T:Diverse.Address.Geography.CityWithRelatedInformation"/> one can find in <see cref="F:Diverse.Address.Geography.Country.China"/>.
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.Countries.China.StreetNames">
            <summary>
            Gets samples of street names one could find in <see cref="F:Diverse.Address.Geography.Country.China"/>.
            </summary>
        </member>
        <member name="T:Diverse.Address.Geography.Countries.France">
            <summary>
            Provides samples of what could be find in <see cref="F:Diverse.Address.Geography.Country.France"/>.
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.Countries.France.Cities">
            <summary>
            Gets the list of <see cref="T:Diverse.Address.Geography.CityWithRelatedInformation"/> one can find in <see cref="F:Diverse.Address.Geography.Country.France"/>.
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.Countries.France.StreetNames">
            <summary>
            Gets samples of street names one could find in <see cref="F:Diverse.Address.Geography.Country.France"/>.
            </summary>
        </member>
        <member name="T:Diverse.Address.Geography.Countries.UnitedStatesOfAmerica">
            <summary>
            Provides samples of what could be find in <see cref="F:Diverse.Address.Geography.Country.Usa"/>.
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.Countries.UnitedStatesOfAmerica.Cities">
            <summary>
            Gets the list of <see cref="T:Diverse.Address.Geography.CityWithRelatedInformation"/> one can find in <see cref="F:Diverse.Address.Geography.Country.Usa"/>.
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.Countries.UnitedStatesOfAmerica.StreetNames">
            <summary>
            Gets samples of street names one can find in <see cref="F:Diverse.Address.Geography.Country.Usa"/>.
            </summary>
        </member>
        <member name="T:Diverse.Address.Geography.Country">
            <summary>
            Country.
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.Country.France">
            <summary>
            France
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.Country.England">
            <summary>
            England
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.Country.Usa">
            <summary>
            United States of America
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.Country.China">
            <summary>
            China
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.Country.India">
            <summary>
            India
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.Country.Australia">
            <summary>
            Australia
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.Country.NewZeland">
            <summary>
            New Zeland
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.Country.Sweden">
            <summary>
            Sweden
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.Country.CentralAfricanRepublic">
            <summary>
            Central African Republic
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.Country.Senegal">
            <summary>
            Senegal
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.Country.Nigeria">
            <summary>
            Nigeria
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.Country.Russia">
            <summary>
            Russia
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.Country.Ukraine">
            <summary>
            Ukraine
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.Country.Japan">
            <summary>
            Japan
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.Country.Thailand">
            <summary>
            Thailand
            </summary>
        </member>
        <member name="T:Diverse.Address.Geography.GeographyExpert">
            <summary>
            Gathers all infos related to Geography (continent, countries, cities).
            </summary>
            <remarks>Note: All associations between cities, state/province/area and Countries are made here.</remarks>
        </member>
        <member name="P:Diverse.Address.Geography.GeographyExpert.CityNames">
            <summary>
            Gets the names of all the cities registered in the Diverse lib.
            </summary>
        </member>
        <member name="M:Diverse.Address.Geography.GeographyExpert.GiveMeCitiesOf(Diverse.Address.Geography.Country)">
            <summary>
            Gives an array with all the cities related to a <see cref="T:Diverse.Address.Geography.Country"/>.
            </summary>
            <param name="country">The <see cref="T:Diverse.Address.Geography.Country"/>.</param>
            <returns>An array with all the cities related to a <see cref="T:Diverse.Address.Geography.Country"/>.</returns>
        </member>
        <member name="M:Diverse.Address.Geography.GeographyExpert.GiveMeStateProvinceAreaOf(Diverse.Address.Geography.Country)">
            <summary>
            Gives an array with all the <see cref="T:Diverse.Address.Geography.StateProvinceArea"/> related to a <see cref="T:Diverse.Address.Geography.Country"/>.
            /// </summary>
            <param name="country">The <see cref="T:Diverse.Address.Geography.Country"/>.</param>
            <returns>An array of all the <see cref="T:Diverse.Address.Geography.StateProvinceArea"/> registered for this <see cref="T:Diverse.Address.Geography.Country"/> in the Diverse lib.</returns>
        </member>
        <member name="P:Diverse.Address.Geography.GeographyExpert.CitiesOfTheWorld">
            <summary>
            Gets an array containing all the <see cref="T:Diverse.Address.Geography.CityWithRelatedInformation"/> registered in Diverse.
            </summary>
        </member>
        <member name="M:Diverse.Address.Geography.GeographyExpert.GiveMeStateProvinceAreaOf(System.String)">
            <summary>
            Gives the <see cref="T:Diverse.Address.Geography.StateProvinceArea"/> of a given city name.
            </summary>
            <param name="cityName">The name of the city.</param>
            <returns>The <see cref="T:Diverse.Address.Geography.StateProvinceArea"/> where this city belongs.</returns>
        </member>
        <member name="M:Diverse.Address.Geography.GeographyExpert.GiveMeCountryOf(System.String)">
            <summary>
            Gives the <see cref="T:Diverse.Address.Geography.Country"/> of a given city name.
            </summary>
            <param name="cityName">The name of the city.</param>
            <returns>The <see cref="T:Diverse.Address.Geography.Country"/> where this city belongs.</returns>
        </member>
        <member name="M:Diverse.Address.Geography.GeographyExpert.GiveMeStreetsOf(Diverse.Address.Geography.Country)">
            <summary>
            Gives all the registered streets of a <see cref="T:Diverse.Address.Geography.Country"/>.
            </summary>
            <param name="country">The <see cref="T:Diverse.Address.Geography.Country"/></param>
            <returns>All the streets of the provided <see cref="T:Diverse.Address.Geography.Country"/> that are registered in Diverse lib.</returns>
        </member>
        <member name="M:Diverse.Address.Geography.GeographyExpert.GiveMeZipCodeFormatOf(System.String)">
            <summary>
            Gives the ZipCode format registered for this city in Diverse.
            </summary>
            <param name="cityName">The name of the city you want to get the ZipCode format.</param>
            <returns>The ZipCode format registered for this city in Diverse.</returns>
        </member>
        <member name="T:Diverse.Address.Geography.StateProvinceArea">
            <summary>
            The State/Province or Area.
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.IleDeFrance">
            <summary>
            Ile de France (France)
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.Bretagne">
            <summary>
            Bretagne (France)
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.AuvergneRhoneAlpes">
            <summary>
            Auvergne Rhône Alpes (France)
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.Occitanie">
            <summary>
            Occitanie (France)
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.PaysDeLaLoire">
            <summary>
            Pays de la Loire (France)
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.NouvelleAquitaine">
            <summary>
            Nouvelle Aquitaine (France)
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.ProvenceAlpesCoteDAzur">
            <summary>
            Provence-Alpes-Côte d'Azure (France)
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.ChineseAutonomous">
            <summary>
            Autonomous region (China)
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.ChineseMunicipal">
            <summary>
            Municipal (China)
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.Yunnan">
            <summary>
            Yunnan (China)
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.Hubei">
            <summary>
            Hubei (China)
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.Hainan">
            <summary>
            Hainan (China)
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.California">
            <summary>
            California
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.Colorado">
            <summary>
            Colorado
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.Illinois">
            <summary>
            Illinois
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.Wisconsin">
            <summary>
            Wisconsin
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.Washington">
            <summary>
            Washington state
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.DC">
            <summary>
            District of Columbia (DC)
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.Florida">
            <summary>
            Florida
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.Nevada">
            <summary>
            Nevada
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.Louisiana">
            <summary>
            Louisiana
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.Texas">
            <summary>
            Texas
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.Pennsylvania">
            <summary>
            Pennsylvania
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.Arizona">
            <summary>
            Arizona
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.Maharashtra">
            <summary>
            Maharashtra (India)
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.Delhi">
            <summary>
            Delhi (India)
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.Karnataka">
            <summary>
            Karnataka (India)
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.Bangui">
            <summary>
            Bangui la douce region (Central African Republic).
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.Dakar">
            <summary>
            Dakar region (Senegal)
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.NewYork">
            <summary>
            New York City (NYC)
            </summary>
        </member>
        <member name="F:Diverse.Address.Geography.StateProvinceArea.London">
            <summary>
             London
            </summary>
        </member>
        <member name="T:Diverse.Collections.CollectionFuzzer">
            <summary>
            Fuzz from collections.
            </summary>
        </member>
        <member name="M:Diverse.Collections.CollectionFuzzer.#ctor(Diverse.IFuzz)">
            <summary>
            Instantiates a <see cref="T:Diverse.Collections.CollectionFuzzer"/>.
            </summary>
            <param name="fuzzer">Instance of <see cref="T:Diverse.IFuzz"/> to use.</param>
        </member>
        <member name="M:Diverse.Collections.CollectionFuzzer.PickOneFrom``1(System.Collections.Generic.IList{``0})">
            <summary>
            Randomly pick one element from a given collection.
            </summary>
            <param name="candidates"></param>
            <returns>One of the elements from the candidates collection.</returns>
        </member>
        <member name="T:Diverse.DateTimes.DateTimeFuzzer">
            <summary>
            Fuzz <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:Diverse.DateTimes.DateTimeFuzzer.#ctor(Diverse.IFuzz)">
            <summary>
            Instantiates a <see cref="T:Diverse.DateTimes.DateTimeFuzzer"/>.
            </summary>
            <param name="fuzzer">Instance of <see cref="T:Diverse.IFuzz"/> to use.</param>
        </member>
        <member name="M:Diverse.DateTimes.DateTimeFuzzer.GenerateDateTime">
            <summary>
            Generates a random <see cref="T:System.DateTime"/>.
            </summary>
            <returns>A <see cref="T:System.DateTime"/> value generated randomly.</returns>
        </member>
        <member name="M:Diverse.DateTimes.DateTimeFuzzer.GenerateDateTimeBetween(System.DateTime,System.DateTime)">
            <summary>
            Generates a random <see cref="T:System.DateTime"/> in a Time Range.
            </summary>
            <param name="minValue">The minimum inclusive boundary of the Time Range for this <see cref="T:System.DateTime"/> generation.</param>
            <param name="maxValue">The maximum inclusive boundary of the Time Range for this <see cref="T:System.DateTime"/> generation.</param>
            <returns>A <see cref="T:System.DateTime"/> instance between the min and the max inclusive boundaries.</returns>
        </member>
        <member name="M:Diverse.DateTimes.DateTimeFuzzer.GenerateDateTimeBetween(System.String,System.String)">
            <summary>
            Generates a random <see cref="T:System.DateTime"/> in a Time Range.
            </summary>
            <param name="minDate">The minimum inclusive boundary of the Time Range for this <see cref="T:System.DateTime"/> generation, specified as a yyyy/MM/dd string.</param>
            <param name="maxDate">The maximum inclusive boundary of the Time Range for this <see cref="T:System.DateTime"/> generation, specified as a yyyy/MM/dd string.</param>
            <returns>A <see cref="T:System.DateTime"/> instance between the min and the max inclusive boundaries.</returns>
        </member>
        <member name="T:Diverse.DuplicationException">
            <summary>
            Represents errors that occur when <see cref="P:Diverse.Fuzzer.AvoidDuplication"/> is set to <b>true</b>
            and we couldn't find a non-already provided value after the max number
            of attempts configured within Diverse. 
            </summary>
        </member>
        <member name="M:Diverse.DuplicationException.#ctor(System.Type,System.Int32,System.Collections.Generic.SortedSet{System.Object})">
            <summary>
            Instantiates a <see cref="T:Diverse.DuplicationException"/>.
            </summary>
            <param name="typeRequested">Type to be generated.</param>
            <param name="maxAttemptsToFindNotAlreadyProvidedValue">Maximum number of attempts achieved before throwing this exception.</param>
            <param name="alreadyProvidedValues">Set of already provided values.</param>
        </member>
        <member name="T:Diverse.Fuzzer">
            <summary>
            Allows to generate lots of combination of things. <see cref="T:Diverse.Fuzzer"/> are very useful to detect hard coded values in our implementations.
            Note: you can instantiate another Deterministic Fuzzer by providing it the Seed you want to reuse.
            </summary>
        </member>
        <member name="P:Diverse.Fuzzer.SideEffectFreeSafeFuzzer">
             <summary>
             internal Fuzzer instance to be used by the various lambdas
             related to the AvoidDuplication mode (i.e. when the option is
             set to <b>true</b>).
            
             Ironically, the AvoidDuplication mode of this Fuzzer needs
             to use another fuzzer instance for the Lastchance mode (i.e. when the
             MaxFailingAttemptsToFindNotAlreadyProvidedValueDefaultValue has been
             reached).
            
             E.g.: if you call the <see cref="M:Diverse.Fuzzer.GenerateAge"/> method on a Fuzzer with
             AvoidDuplication set to <b>true</b> in a situation where the
             <see cref="F:Diverse.Fuzzer.MaxFailingAttemptsToFindNotAlreadyProvidedValueDefaultValue"/>
             was not enough to find another original value, the lastChance lambda
             of the <see cref="M:Diverse.Fuzzer.GenerateWithoutDuplication``1(System.Reflection.MethodBase,System.Int32,System.Int32,System.Func{Diverse.IFuzz,``0},System.Func{System.Collections.Generic.SortedSet{System.Object},Diverse.Maybe{``0}})"/> method will be called.
            
             In that case, since the last chance lambda of the <see cref="M:Diverse.Fuzzer.GenerateAge"/>
             method is using the <see cref="M:Diverse.IFuzzNumbers.GenerateInteger(System.Nullable{System.Int32},System.Nullable{System.Int32})"/> method,
             we need to avoid <see cref="T:System.StackOverflowException"/> by using
             a <see cref="P:Diverse.Fuzzer.SideEffectFreeSafeFuzzer"/> instance in that specific case
             (in all lastChance lambdas actually).
             </summary>
        </member>
        <member name="P:Diverse.Fuzzer.MaxFailingAttemptsToFindNotAlreadyProvidedValue">
            <summary>
            Gets or sets the max number of attempts the Fuzzer should make in order to generate
            a not already provided value when <see cref="P:Diverse.Fuzzer.AvoidDuplication"/> mode
            is enabled (via constructor).
            </summary>
        </member>
        <member name="P:Diverse.Fuzzer.MaxRangeSizeAllowedForMemoization">
            <summary>
            Gets or sets the maximum number of entries to be memoized if
            <see cref="P:Diverse.Fuzzer.AvoidDuplication"/> mode is enabled (via constructor).
            </summary>
        </member>
        <member name="P:Diverse.Fuzzer.Seed">
            <summary>
            Generates a DefaultSeed. Important to keep a trace of the used seed so that we can reproduce a failing situation with <see cref="T:Diverse.Fuzzer"/> involved.
            </summary>
        </member>
        <member name="P:Diverse.Fuzzer.Name">
            <summary>
            Gets the name of this <see cref="T:Diverse.Fuzzer"/> instance.
            </summary>
        </member>
        <member name="P:Diverse.Fuzzer.AvoidDuplication">
            <summary>
            Gets of sets a value indicating whether the <see cref="T:Diverse.Fuzzer"/> should avoid providing twice the same value or not.
            </summary>
        </member>
        <member name="P:Diverse.Fuzzer.Diverse#IFuzz#Random">
            <summary>
            Gets the Random instance to be used when we want to create a new extension method for the <see cref="T:Diverse.Fuzzer"/>.
            <remarks>The use of explicit interface implementation for this property is made on purpose in order to hide this internal mechanic details from the Fuzzer end-user code.</remarks>
            </summary>
        </member>
        <member name="P:Diverse.Fuzzer.InternalRandom">
            <summary>
            Gives easy access to the <see cref="P:Diverse.IFuzz.Random"/> explicit implementation.
            </summary>
        </member>
        <member name="P:Diverse.Fuzzer.Log">
            <summary>
            Sets the way you want to log or receive what the <see cref="T:Diverse.Fuzzer"/> has to say about every generated seeds used for every fuzzer instance and test.
            </summary>
        </member>
        <member name="M:Diverse.Fuzzer.#ctor(System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean})">
            <summary>
            Instantiates a <see cref="T:Diverse.Fuzzer"/>.
            </summary>
            <param name="seed">The seed if you want to reuse in order to reproduce the very same conditions of another (failing) test.</param>
            <param name="name">The name you want to specify for this <see cref="T:Diverse.Fuzzer"/> instance (useful for debuging purpose).</param>
            <param name="avoidDuplication"><b>true</b> if you do not want the Fuzzer to provide you twice the same result for every fuzzing method type, <b>false</b> otherwise.</param>
        </member>
        <member name="M:Diverse.Fuzzer.HeadsOrTails">
            <summary>
            Flips a coin.
            </summary>
            <returns><b>True</b> if Heads; <b>False</b> otherwise (i.e. Tails).</returns>
        </member>
        <member name="M:Diverse.Fuzzer.GenerateWithoutDuplication``1(System.Reflection.MethodBase,System.Int32,System.Int32,System.Func{Diverse.IFuzz,``0},System.Func{System.Collections.Generic.SortedSet{System.Object},Diverse.Maybe{``0}})">
            <summary>
            Methods to be used when <see cref="P:Diverse.Fuzzer.AvoidDuplication"/> is set to <b>true</b>
            for any fuzzing method of this <see cref="T:Diverse.Fuzzer"/> instance.
            It encapsulates the logic of various attempts and retries before
            falling back to a very specific <paramref name="lastChanceGenerationFunction"/>
            lambda associated to the considered fuzzing method.
            </summary>
            <typeparam name="T">Type to be fuzzed/generated</typeparam>
            <param name="currentMethod">
                The current Method calling us (e.g.: <see cref="M:Diverse.Fuzzer.GenerateAge"/>).
                Used for memoization purpose.
            </param>
            <param name="argumentsHashCode">
                A hash for the current method call arguments. Used for memoization purpose.
            </param>
            <param name="maxFailingAttemptsBeforeLastChanceFunctionIsCalled">
                The maximum number of calls to the <paramref name="standardGenerationFunction"/>
                we should try before we fall-back and call the
                <paramref name="lastChanceGenerationFunction"/> lambda.
            </param>
            <param name="standardGenerationFunction">
                The function to use in order to generate the thing(s) we want.
                It should be the same function that the one we call for the cases
                where <see cref="P:Diverse.Fuzzer.AvoidDuplication"/> is set to <b>false</b>.
            </param>
            <param name="lastChanceGenerationFunction">
                The function to use in order to generate the thing(s) we want when
                all the <paramref name="standardGenerationFunction"/> attempts have failed.
                To do our job, we receive:
                    - A <see cref="T:System.Collections.Generic.SortedSet`1"/> instance with all the previously
                      generated values
            
                    - A side-effect free <see cref="T:Diverse.IFuzz"/> instance to use if needed.
                      (one should not use the current instance of <see cref="T:Diverse.Fuzzer"/>
                      to do the job since it may have side-effects
                      and lead to <see cref="T:System.StackOverflowException"/>)).
            </param>
            <returns>The thing(s) we want to generate.</returns>
        </member>
        <member name="M:Diverse.Fuzzer.GenerateInteger(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Generates a random integer value between a min (inclusive) and a max (exclusive) value.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The inclusive upper bound of the random number returned.</param>
            <returns>An integer value generated randomly.</returns>
        </member>
        <member name="M:Diverse.Fuzzer.GeneratePositiveInteger(System.Nullable{System.Int32})">
            <summary>
            Generates a random positive integer value.
            </summary>
            <param name="maxValue">The inclusive upper bound of the random number returned.</param>
            <returns>A positive integer value generated randomly.</returns>
        </member>
        <member name="M:Diverse.Fuzzer.GenerateDecimal(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            Generates a random decimal value.
            </summary>
            <param name="minValue">(optional) The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">(optional) The inclusive upper bound of the random number returned.</param>
            <returns>A decimal value generated randomly.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="minValue">minValue</paramref> is greater than <paramref name="maxValue">maxValue</paramref>.</exception>
        </member>
        <member name="M:Diverse.Fuzzer.GeneratePositiveDecimal(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            Generates a random positive decimal value.
            </summary>
            <param name="minValue">(optional) The inclusive positive lower bound of the random number returned.</param>
            <param name="maxValue">(optional) The inclusive positive upper bound of the random number returned.</param>
            <returns>A positive decimal value generated randomly.</returns>
        </member>
        <member name="M:Diverse.Fuzzer.GenerateLong(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Generates a random long value.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The inclusive upper bound of the random number returned.</param>
            <returns>A long value generated randomly.</returns>
        </member>
        <member name="M:Diverse.Fuzzer.GenerateAddress(System.Nullable{Diverse.Address.Geography.Country})">
            <summary>
            Randomly generates an <see cref="N:Diverse.Address"/>.
            </summary>
            <param name="country">The <see cref="T:Diverse.Address.Geography.Country"/> of the address to generate.</param>
            <returns>The generated Address.</returns>
        </member>
        <member name="M:Diverse.Fuzzer.GenerateFirstName(System.Nullable{Diverse.Gender})">
            <summary>
            Generates a 'Diverse' first name (i.e. from all around the world and different cultures).
            </summary>
            <param name="gender">The <see cref="T:Diverse.Gender"/> to be used as indication (optional).</param>
            <returns>A 'Diverse' first name.</returns>
        </member>
        <member name="M:Diverse.Fuzzer.GenerateLastName(System.String)">
            <summary>
            Generates a 'Diverse' first name (i.e. from all around the world and different cultures).
            </summary>
            <param name="firstName">The first name of this person.</param>
            <returns>A 'Diverse' last name.</returns>
        </member>
        <member name="M:Diverse.Fuzzer.GenerateAge">
            <summary>
            Generates the number of year to be associated with a person.
            </summary>
            <returns>The number of year to be associated with a person.</returns>
        </member>
        <member name="M:Diverse.Fuzzer.GeneratePerson(System.Nullable{Diverse.Gender})">
            <summary>
            Generates a 'Diverse' <see cref="T:Diverse.Person"/> (i.e. from all around the world and different cultures). 
            </summary>
            <param name="gender">The (optional) <see cref="T:Diverse.Gender"/> of this <see cref="T:Diverse.Person"/></param>
            <returns>A 'Diverse' <see cref="T:Diverse.Person"/> instance.</returns>
        </member>
        <member name="M:Diverse.Fuzzer.GenerateEMail(System.String,System.String)">
            <summary>
            Generates a random Email.
            </summary>
            <param name="firstName">The (optional) first name for this Email</param>
            <param name="lastName">The (option) last name for this Email.</param>
            <returns>A random Email.</returns>
        </member>
        <member name="M:Diverse.Fuzzer.GeneratePassword(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Generates a password following some common rules asked on the internet.
            </summary>
            <returns>The generated password</returns>
        </member>
        <member name="M:Diverse.Fuzzer.PickOneFrom``1(System.Collections.Generic.IList{``0})">
            <summary>
            Randomly pick one element from a given collection.
            </summary>
            <param name="candidates"></param>
            <returns>One of the elements from the candidates collection.</returns>
        </member>
        <member name="M:Diverse.Fuzzer.GenerateDateTime">
            <summary>
            Generates a random <see cref="T:System.DateTime"/>.
            </summary>
            <returns>A <see cref="T:System.DateTime"/> value generated randomly.</returns>
        </member>
        <member name="M:Diverse.Fuzzer.GenerateDateTimeBetween(System.DateTime,System.DateTime)">
            <summary>
            Generates a random <see cref="T:System.DateTime"/> in a Time Range.
            </summary>
            <param name="minValue">The minimum inclusive boundary of the Time Range for this <see cref="T:System.DateTime"/> generation.</param>
            <param name="maxValue">The maximum inclusive boundary of the Time Range for this <see cref="T:System.DateTime"/> generation.</param>
            <returns>A <see cref="T:System.DateTime"/> instance between the min and the max inclusive boundaries.</returns>
        </member>
        <member name="M:Diverse.Fuzzer.GenerateDateTimeBetween(System.String,System.String)">
            <summary>
            Generates a random <see cref="T:System.DateTime"/> in a Time Range.
            </summary>
            <param name="minDate">The minimum inclusive boundary of the Time Range for this <see cref="T:System.DateTime"/> generation, specified as a yyyy/MM/dd string.</param>
            <param name="maxDate">The maximum inclusive boundary of the Time Range for this <see cref="T:System.DateTime"/> generation, specified as a yyyy/MM/dd string.</param>
            <returns>A <see cref="T:System.DateTime"/> instance between the min and the max inclusive boundaries.</returns>
        </member>
        <member name="M:Diverse.Fuzzer.GenerateAdjective(System.Nullable{Diverse.Strings.Feeling})">
            <summary>
            Generates a random adjective based on a feeling.
            </summary>
            <param name="feeling">The expected feeling of the adjective</param>
            <returns>An adjective based on a particular feeling or random one if not provided</returns>
        </member>
        <member name="M:Diverse.Fuzzer.GenerateStringFromPattern(System.String)">
            <summary>
            Generates a string from a given 'diverse' format.
            </summary>
            <param name="diverseFormat">The 'diverse' format to use.</param>
            <returns>A randomly generated string following the 'diverse' format.</returns>
        </member>
        <member name="M:Diverse.Fuzzer.GenerateGuid">
            <summary>
            Generates a random <see cref="T:System.Guid"/>
            </summary>
            <returns>A random <see cref="T:System.Guid"/>.</returns>
        </member>
        <member name="M:Diverse.Fuzzer.GenerateInstanceOf``1">
            <summary>
            Generates an instance of a type T.
            </summary>
            <returns>An instance of type T with some fuzzed properties.</returns>
        </member>
        <member name="M:Diverse.Fuzzer.GenerateEnum``1">
            <summary>
            Generates an instance of an <see cref="T:System.Enum"/> type.
            </summary>
            <typeparam name="T">Type of the <see cref="T:System.Enum"/></typeparam>
            <returns>An random value of the specified <see cref="T:System.Enum"/> type.</returns>
        </member>
        <member name="M:Diverse.Fuzzer.GenerateWords(System.Nullable{System.Int32})">
            <summary>
            Generates random latin words.
            </summary>
            <remarks>This method won't be affected by the <see cref="P:Diverse.Fuzzer.AvoidDuplication"/> mode.</remarks>
            <param name="number">(optional) Number of words to generate.</param>
            <returns>The generated latin words.</returns>
        </member>
        <member name="M:Diverse.Fuzzer.GenerateSentence(System.Nullable{System.Int32})">
            <summary>
            Generate a sentence in latin.
            </summary>
            <remarks>This method won't be affected by the <see cref="P:Diverse.Fuzzer.AvoidDuplication"/> mode.</remarks>
            <param name="nbOfWords">(optional) Number of words for this sentence.</param>
            <returns>The generated sentence in latin.</returns>
        </member>
        <member name="M:Diverse.Fuzzer.GenerateParagraph(System.Nullable{System.Int32})">
            <summary>
            Generates a paragraph in latin.
            </summary>
            <remarks>This method won't be affected by the <see cref="P:Diverse.Fuzzer.AvoidDuplication"/> mode.</remarks>
            <param name="nbOfSentences">(optional) Number of sentences for this paragraph.</param>
            <returns>The generated paragraph in latin.</returns>
        </member>
        <member name="M:Diverse.Fuzzer.GenerateParagraphs(System.Nullable{System.Int32})">
            <summary>
            Generates a collection of paragraphs. 
            </summary>
            <remarks>This method won't be affected by the <see cref="P:Diverse.Fuzzer.AvoidDuplication"/> mode.</remarks>
            <param name="nbOfParagraphs">(optional) Number of paragraphs to generate.</param>
            <returns>The collection of paragraphs.</returns>
        </member>
        <member name="M:Diverse.Fuzzer.GenerateText(System.Nullable{System.Int32})">
            <summary>
            Generates a text in latin with a specified number of paragraphs.
            </summary>
            <remarks>This method won't be affected by the <see cref="P:Diverse.Fuzzer.AvoidDuplication"/> mode.</remarks>
            <param name="nbOfParagraphs">(optional) Number of paragraphs to generate.</param>
            <returns>The generated text in latin.</returns>
        </member>
        <member name="M:Diverse.Fuzzer.GenerateLetter">
            <summary>
            Generates a random letter.
            </summary>
            <returns>The generated letter.</returns>
        </member>
        <member name="T:Diverse.FuzzerException">
            <summary>
            An exception related to Fuzzing.
            </summary>
        </member>
        <member name="M:Diverse.FuzzerException.#ctor(System.String)">
            <summary>
            Instantiates a <see cref="T:Diverse.FuzzerException"/>.
            </summary>
            <param name="message">The message of the <see cref="T:Diverse.FuzzerException"/>.</param>
        </member>
        <member name="T:Diverse.GuidFuzzer">
            <summary>
            <see cref="T:System.Guid"/> Fuzzer.
            </summary>
        </member>
        <member name="M:Diverse.GuidFuzzer.#ctor(Diverse.IFuzz)">
            <summary>
            Instantiate a <see cref="T:Diverse.GuidFuzzer"/>.
            </summary>
            <param name="fuzzer">Instance of <see cref="T:Diverse.IFuzz"/> to use.</param>
        </member>
        <member name="M:Diverse.GuidFuzzer.GenerateGuid">
            <summary>
            Generates a random <see cref="T:System.Guid"/>
            </summary>
            <returns>A random <see cref="T:System.Guid"/>.</returns>
        </member>
        <member name="T:Diverse.Maybe`1">
            <summary>
            Maybe monad. A <see cref="T:Diverse.Maybe`1"/> is a discriminated union type with two possible value constructors.
            </summary>
            <typeparam name="T">The type of the value</typeparam>
        </member>
        <member name="M:Diverse.Maybe`1.#ctor">
            <summary>
            Instantiates a <see cref="T:Diverse.Maybe`1"/> that has no Item.
            </summary>
        </member>
        <member name="M:Diverse.Maybe`1.#ctor(`0)">
            <summary>
            Instantiates a <see cref="T:Diverse.Maybe`1"/> that has an item.
            </summary>
            <param name="item">The item of the <see cref="T:Diverse.Maybe`1"/> instance.</param>
        </member>
        <member name="M:Diverse.Maybe`1.Select``1(System.Func{`0,``0})">
            <summary>
            Select
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Diverse.Maybe`1.GetValueOrFallback(`0)">
            <summary>
            Gets the value or fallback with provided value otherwise.
            </summary>
            <param name="fallbackValue">The fallback value to return if no item is set.</param>
            <returns>The Value</returns>
        </member>
        <member name="M:Diverse.Maybe`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Diverse.Maybe`1"/> objects are considered equal.
            </summary>
            <param name="obj">The second <see cref="T:Diverse.Maybe`1"/> object to compare.</param>
            <returns><b>true</b> if the two <see cref="T:Diverse.Maybe`1"/> are equal, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Diverse.Maybe`1.GetHashCode">
            <summary>
            Hash function.
            </summary>
            <returns>A hash code for the current <see cref="T:Diverse.Maybe`1"/>.</returns>
        </member>
        <member name="T:Diverse.MemoizerKey">
            <summary>
            Key used by the internal Memoizer
            (enabled if AvoidDuplication is set to <b>true</b>).
            </summary>
        </member>
        <member name="T:Diverse.NumberExtensions">
            <summary>
            Extension methods for numbers.
            </summary>
        </member>
        <member name="M:Diverse.NumberExtensions.ExtractScale(System.Decimal)">
            <summary>
            Extract the scale of a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="number">The <see cref="T:System.Decimal"/> number.</param>
            <returns>The scale of the <see cref="T:System.Decimal"/> number.</returns>
        </member>
        <member name="M:Diverse.NumberExtensions.FuzzDecimalScaleBetween(System.Byte,System.Byte,System.Random)">
            <summary>
            Fuzz a scale for a <see cref="T:System.Decimal"/> number that is included between a min scale and a max scale.
            </summary>
            <param name="minValue">The lower bound for this scale to be fuzzed.</param>
            <param name="maxValue">The upper bound for this scale to be fuzzed.</param>
            <param name="random">The <see cref="T:System.Random"/> instance to be used to fuzz.</param>
            <returns>A scale for a <see cref="T:System.Decimal"/> number that is included between the min and max provided (inclusive).</returns>
        </member>
        <member name="M:Diverse.NumberExtensions.ComputeRange(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Computes the number of long included in the considered range.
            </summary>
            <param name="minValue">(optional) the minimum value.</param>
            <param name="maxValue">(optional) the maximum value.</param>
            <returns>The number of elements in the considered range.</returns>
        </member>
        <member name="T:Diverse.StringExtensions">
            <summary>
            Extension methods for <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Diverse.StringExtensions.RemoveDiacritics(System.String)">
            <summary>
            Remove diacritics (accents etc) from a given <see cref="T:System.String"/>.
            </summary>
            <param name="text">The <see cref="T:System.String"/> you want to remove diacritics from.</param>
            <returns>The string without accents/diacritic.</returns>
        </member>
        <member name="M:Diverse.StringExtensions.FirstCharToUpper(System.String)">
            <summary>
            Upper the first char of a word.
            </summary>
            <param name="word">The word to upper.</param>
            <returns>The word with the first letter capitalized.</returns>
        </member>
        <member name="T:Diverse.IFuzz">
            <summary>
            Interface to build your own <see cref="T:Diverse.Fuzzer"/> through extension methods.
            </summary>
        </member>
        <member name="P:Diverse.IFuzz.Random">
            <summary>
            Gets a <see cref="P:Diverse.IFuzz.Random"/> instance to use if you want your extensible Fuzzer to be deterministic when providing a seed.
            </summary>
        </member>
        <member name="M:Diverse.IFuzz.HeadsOrTails">
            <summary>
            Flips a coin.
            </summary>
            <returns><b>True</b> if Heads; <b>False</b> otherwise (i.e. Tails).</returns>
        </member>
        <member name="P:Diverse.IFuzz.AvoidDuplication">
            <summary>
            Gets of sets a value indicating whether the <see cref="T:Diverse.Fuzzer"/> should avoid providing twice the same value or not.
            </summary>
        </member>
        <member name="T:Diverse.IFuzzAddress">
            <summary>
            Fuzz <see cref="N:Diverse.Address"/>.
            </summary>
        </member>
        <member name="M:Diverse.IFuzzAddress.GenerateAddress(System.Nullable{Diverse.Address.Geography.Country})">
            <summary>
            Randomly generates an <see cref="T:Diverse.Address.Address"/>.
            </summary>
            <param name="country">The <see cref="T:Diverse.Address.Geography.Country"/> of the address to generate.</param>
            <returns>The generated Address.</returns>
        </member>
        <member name="T:Diverse.IFuzzDatesAndTime">
            <summary>
            Fuzz Dates and Time.
            </summary>
        </member>
        <member name="M:Diverse.IFuzzDatesAndTime.GenerateDateTime">
            <summary>
            Generates a random <see cref="T:System.DateTime"/>.
            </summary>
            <returns>A <see cref="T:System.DateTime"/> value generated randomly.</returns>
        </member>
        <member name="M:Diverse.IFuzzDatesAndTime.GenerateDateTimeBetween(System.DateTime,System.DateTime)">
            <summary>
            Generates a random <see cref="T:System.DateTime"/> in a Time Range.
            </summary>
            <param name="minValue">The minimum inclusive boundary of the Time Range for this <see cref="T:System.DateTime"/> generation.</param>
            <param name="maxValue">The maximum inclusive boundary of the Time Range for this <see cref="T:System.DateTime"/> generation.</param>
            <returns>A <see cref="T:System.DateTime"/> instance between the min and the max inclusive boundaries.</returns>
        </member>
        <member name="M:Diverse.IFuzzDatesAndTime.GenerateDateTimeBetween(System.String,System.String)">
            <summary>
            Generates a random <see cref="T:System.DateTime"/> in a Time Range.
            </summary>
            <param name="minDate">The minimum inclusive boundary of the Time Range for this <see cref="T:System.DateTime"/> generation, specified as a yyyy/MM/dd string.</param>
            <param name="maxDate">The maximum inclusive boundary of the Time Range for this <see cref="T:System.DateTime"/> generation, specified as a yyyy/MM/dd string.</param>
            <returns>A <see cref="T:System.DateTime"/> instance between the min and the max inclusive boundaries.</returns>
        </member>
        <member name="T:Diverse.IFuzzFromCollections">
            <summary>
            Fuzz from collections.
            </summary>
        </member>
        <member name="M:Diverse.IFuzzFromCollections.PickOneFrom``1(System.Collections.Generic.IList{``0})">
            <summary>
            Randomly pick one element from a given collection.
            </summary>
            <param name="candidates"></param>
            <returns>One of the elements from the candidates collection.</returns>
        </member>
        <member name="T:Diverse.IFuzzGuid">
            <summary>
            Fuzz <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="M:Diverse.IFuzzGuid.GenerateGuid">
            <summary>
            Generates a random <see cref="T:System.Guid"/>
            </summary>
            <returns>A random <see cref="T:System.Guid"/>.</returns>
        </member>
        <member name="T:Diverse.IFuzzLorem">
            <summary>
            Fuzz texts in Latin (see. Lorem Ipsum... https://www.lipsum.com/).
            </summary>
        </member>
        <member name="M:Diverse.IFuzzLorem.GenerateLetter">
            <summary>
            Generates a random letter.
            </summary>
            <returns>The generated letter.</returns>
        </member>
        <member name="M:Diverse.IFuzzLorem.GenerateWords(System.Nullable{System.Int32})">
            <summary>
            Generates random latin words.
            </summary>
            <param name="number">(optional) Number of words to generate.</param>
            <returns>The generated latin words.</returns>
        </member>
        <member name="M:Diverse.IFuzzLorem.GenerateSentence(System.Nullable{System.Int32})">
            <summary>
            Generate a sentence in latin.
            </summary>
            <param name="nbOfWords">(optional) Number of words for this sentence.</param>
            <returns>The generated sentence in latin.</returns>
        </member>
        <member name="M:Diverse.IFuzzLorem.GenerateParagraph(System.Nullable{System.Int32})">
            <summary>
            Generates a paragraph in latin.
            </summary>
            <param name="nbOfSentences">(optional) Number of sentences for this paragraph.</param>
            <returns>The generated paragraph in latin.</returns>
        </member>
        <member name="M:Diverse.IFuzzLorem.GenerateParagraphs(System.Nullable{System.Int32})">
            <summary>
            Generates a collection of paragraphs. 
            </summary>
            <param name="nbOfParagraphs">(optional) Number of paragraphs to generate.</param>
            <returns>The collection of paragraphs.</returns>
        </member>
        <member name="M:Diverse.IFuzzLorem.GenerateText(System.Nullable{System.Int32})">
            <summary>
            Generates a text in latin with a specified number of paragraphs.
            </summary>
            <param name="nbOfParagraphs">(optional) Number of paragraphs to generate.</param>
            <returns>The generated text in latin.</returns>
        </member>
        <member name="T:Diverse.IFuzzNumbers">
            <summary>
            Fuzz numbers.
            </summary>
        </member>
        <member name="M:Diverse.IFuzzNumbers.GenerateInteger(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Generates a random integer value between a min (inclusive) and a max (exclusive) value.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The inclusive upper bound of the random number returned.</param>
            <returns>An integer value generated randomly.</returns>
        </member>
        <member name="M:Diverse.IFuzzNumbers.GeneratePositiveInteger(System.Nullable{System.Int32})">
            <summary>
            Generates a random positive integer value.
            </summary>
            <param name="maxValue">The inclusive upper bound of the random number returned.</param>
            <returns>A positive integer value generated randomly.</returns>
        </member>
        <member name="M:Diverse.IFuzzNumbers.GenerateDecimal(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            Generates a random decimal value.
            </summary>
            <param name="minValue">(optional) The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">(optional) The inclusive upper bound of the random number returned.</param>
            <returns>A decimal value generated randomly.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="minValue">minValue</paramref> is greater than <paramref name="maxValue">maxValue</paramref>.</exception>
        </member>
        <member name="M:Diverse.IFuzzNumbers.GeneratePositiveDecimal(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            Generates a random positive decimal value.
            </summary>
            <param name="minValue">(optional) The inclusive positive lower bound of the random number returned.</param>
            <param name="maxValue">(optional) The inclusive positive upper bound of the random number returned.</param>
            <returns>A positive decimal value generated randomly.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="minValue">minValue</paramref> is greater than <paramref name="maxValue">maxValue</paramref>.</exception>
        </member>
        <member name="M:Diverse.IFuzzNumbers.GenerateLong(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Generates a random long value.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The inclusive upper bound of the random number returned.</param>
            <returns>A long value generated randomly.</returns>
        </member>
        <member name="T:Diverse.IFuzzPersons">
            <summary>
            Fuzz <see cref="T:Diverse.Person"/> related information.
            </summary>
        </member>
        <member name="M:Diverse.IFuzzPersons.GenerateFirstName(System.Nullable{Diverse.Gender})">
            <summary>
            Generates a 'Diverse' first name (i.e. from all around the world and different cultures).
            </summary>
            <param name="gender">The <see cref="T:Diverse.Gender"/> to be used as indication (optional).</param>
            <returns>A 'Diverse' first name.</returns>
        </member>
        <member name="M:Diverse.IFuzzPersons.GenerateLastName(System.String)">
            <summary>
            Generates a 'Diverse' last name (i.e. from all around the world and different cultures).
            </summary>
            <param name="firstName">The first name of this person.</param>
            <returns>A 'Diverse' last name.</returns>
        </member>
        <member name="M:Diverse.IFuzzPersons.GeneratePerson(System.Nullable{Diverse.Gender})">
            <summary>
            Generates a 'Diverse' <see cref="T:Diverse.Person"/> (i.e. from all around the world and different cultures). 
            </summary>
            <param name="gender">The (optional) <see cref="T:Diverse.Gender"/> of this <see cref="T:Diverse.Person"/></param>
            <returns>A 'Diverse' <see cref="T:Diverse.Person"/> instance.</returns>
        </member>
        <member name="M:Diverse.IFuzzPersons.GenerateEMail(System.String,System.String)">
            <summary>
            Generates a random Email.
            </summary>
            <param name="firstName">The (optional) first name for this Email</param>
            <param name="lastName">The (option) last name for this Email.</param>
            <returns>A random Email.</returns>
        </member>
        <member name="M:Diverse.IFuzzPersons.GeneratePassword(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Generates a password following some common rules asked on the internet.
            </summary>
            <returns>The generated password</returns>
        </member>
        <member name="M:Diverse.IFuzzPersons.GenerateAge">
            <summary>
            Generates the number of year to be associated with a person.
            </summary>
            <returns>The number of year to be associated with a person.</returns>
        </member>
        <member name="T:Diverse.IFuzzStrings">
            <summary>
            Fuzz numbers.
            </summary>
        </member>
        <member name="M:Diverse.IFuzzStrings.GenerateAdjective(System.Nullable{Diverse.Strings.Feeling})">
            <summary>
            Generates a random adjective based on a feeling.
            </summary>
            <param name="feeling">The expected feeling of the adjective</param>
            <returns>An adjective based on a particular feeling or random one if not provided</returns>
        </member>
        <member name="M:Diverse.IFuzzStrings.GenerateStringFromPattern(System.String)">
            <summary>
            Generates a string from a given 'diverse' format.
            </summary>
            <param name="diverseFormat">The 'diverse' format to use.</param>
            <returns>A randomly generated string followin the 'diverse' format.</returns>
        </member>
        <member name="T:Diverse.IFuzzTypes">
            <summary>
            Fuzz instance of Types.
            </summary>
        </member>
        <member name="M:Diverse.IFuzzTypes.GenerateInstanceOf``1">
            <summary>
            Generates an instance of a type T.
            </summary>
            <returns>An instance of type T with some fuzzed properties.</returns>
        </member>
        <member name="M:Diverse.IFuzzTypes.GenerateEnum``1">
            <summary>
            Generates an instance of an <see cref="T:System.Enum"/> type.
            </summary>
            <typeparam name="T">Type of the <see cref="T:System.Enum"/></typeparam>
            <returns>An random value of the specified <see cref="T:System.Enum"/> type.</returns>
        </member>
        <member name="T:Diverse.Numbers.NumberFuzzer">
            <summary>
            Fuzz numbers.
            </summary>
        </member>
        <member name="M:Diverse.Numbers.NumberFuzzer.#ctor(Diverse.IFuzz)">
            <summary>
            Instantiates a <see cref="T:Diverse.Numbers.NumberFuzzer"/>.
            </summary>
            <param name="fuzzer">Instance of <see cref="T:Diverse.IFuzz"/> to use.</param>
        </member>
        <member name="M:Diverse.Numbers.NumberFuzzer.GenerateInteger(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Generates a random integer value between a min (inclusive) and a max (exclusive) value.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The inclusive upper bound of the random number returned.</param>
            <returns>An integer value generated randomly.</returns>
        </member>
        <member name="M:Diverse.Numbers.NumberFuzzer.GeneratePositiveInteger(System.Nullable{System.Int32})">
            <summary>
            Generates a random positive integer value.
            </summary>
            <param name="maxValue">The inclusive upper bound of the random number returned.</param>
            <returns>A positive integer value generated randomly.</returns>
        </member>
        <member name="M:Diverse.Numbers.NumberFuzzer.GenerateDecimal(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            Generates a random decimal value.
            </summary>
            <param name="minValue">(optional) The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">(optional) The inclusive upper bound of the random number returned.</param>
            <returns>A decimal value generated randomly.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="minValue">minValue</paramref> is greater than <paramref name="maxValue">maxValue</paramref>.</exception>
        </member>
        <member name="M:Diverse.Numbers.NumberFuzzer.GeneratePositiveDecimal(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            Generates a random positive decimal value.
            </summary>
            <param name="minValue">(optional) The inclusive positive lower bound of the random number returned.</param>
            <param name="maxValue">(optional) The inclusive positive upper bound of the random number returned.</param>
            <returns>A positive decimal value generated randomly.</returns>
        </member>
        <member name="M:Diverse.Numbers.NumberFuzzer.GenerateLong(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Generates a random long value.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The inclusive upper bound of the random number returned.</param>
            <returns>A long value generated randomly.</returns>
        </member>
        <member name="T:Diverse.ContextualizedFirstName">
            <summary>
            A first name with some related information (like the <see cref="P:Diverse.ContextualizedFirstName.Origin"/> of it).
            </summary>
        </member>
        <member name="M:Diverse.ContextualizedFirstName.#ctor(System.String,Diverse.Continent)">
            <summary>
            Instantiates a <see cref="T:Diverse.ContextualizedFirstName"/>.
            </summary>
            <param name="firstName">The first name.</param>
            <param name="origin">The possible origin or the <see cref="T:Diverse.Continent"/> where you can find lots of people having this first name.</param>
        </member>
        <member name="P:Diverse.ContextualizedFirstName.FirstName">
            <summary>
            First name.
            </summary>
        </member>
        <member name="P:Diverse.ContextualizedFirstName.Origin">
            <summary>
            The <see cref="T:Diverse.Continent"/> where this first name may be originated. It may also be the <see cref="T:Diverse.Continent"/> where lots of people have this first name (and not the real Origin for it).
            </summary>
        </member>
        <member name="T:Diverse.Continent">
            <summary>
            Continents on Earth.
            </summary>
        </member>
        <member name="F:Diverse.Continent.Africa">
            <summary>
            Africa
            </summary>
        </member>
        <member name="F:Diverse.Continent.Antarctica">
            <summary>
            Antarctica
            </summary>
        </member>
        <member name="F:Diverse.Continent.Asia">
            <summary>
            Asia
            </summary>
        </member>
        <member name="F:Diverse.Continent.Australia">
            <summary>
            Australia
            </summary>
        </member>
        <member name="F:Diverse.Continent.Europe">
            <summary>
            Europe
            </summary>
        </member>
        <member name="F:Diverse.Continent.NorthAmerica">
            <summary>
            North-America
            </summary>
        </member>
        <member name="F:Diverse.Continent.SouthAmerica">
            <summary>
            South-America
            </summary>
        </member>
        <member name="T:Diverse.Female">
            <summary>
            Information related to female persons.
            </summary>
        </member>
        <member name="P:Diverse.Female.ContextualizedFirstNames">
            <summary>
            Gets all the <see cref="T:Diverse.ContextualizedFirstName"/> instances possibly used by the lib.
            </summary>
        </member>
        <member name="P:Diverse.Female.FirstNames">
            <summary>
            Gets all the female first names possibly used by the lib.
            </summary>
        </member>
        <member name="T:Diverse.Gender">
            <summary>
            Gender of a <see cref="T:Diverse.Person"/>.
            </summary>
        </member>
        <member name="F:Diverse.Gender.Male">
            <summary>
            Male.
            </summary>
        </member>
        <member name="F:Diverse.Gender.Female">
            <summary>
            Female.
            </summary>
        </member>
        <member name="F:Diverse.Gender.NonBinary">
            <summary>
            Non binary.
            </summary>
        </member>
        <member name="T:Diverse.GenderTitle">
            <summary>
            Gender title.
            </summary>
        </member>
        <member name="F:Diverse.GenderTitle.Mr">
            <summary>
            Mister.
            </summary>
        </member>
        <member name="F:Diverse.GenderTitle.Mrs">
            <summary>
            Missus.
            </summary>
        </member>
        <member name="F:Diverse.GenderTitle.Ms">
            <summary>
            Addressing a grown woman as "Ms." is safer than "Miss" or "Mrs."
            </summary>
        </member>
        <member name="F:Diverse.GenderTitle.Mx">
            <summary>
            Miks or Muks (used for Non-binary people).
            </summary>
        </member>
        <member name="T:Diverse.LastNames">
            <summary>
            Contains all the last names used by the library.
            </summary>
        </member>
        <member name="P:Diverse.LastNames.PerContinent">
            <summary>
            Gets a dictionary of all the last name per <see cref="T:Diverse.Continent"/>.
            </summary>
        </member>
        <member name="T:Diverse.Locations">
            <summary>
            Default locations of people in Diverse lib.
            </summary>
        </member>
        <member name="T:Diverse.Male">
            <summary>
            Information related to male persons.
            </summary>
        </member>
        <member name="P:Diverse.Male.ContextualizedFirstNames">
            <summary>
            Gets all the <see cref="T:Diverse.ContextualizedFirstName"/> instances possibly used by the lib.
            </summary>
        </member>
        <member name="P:Diverse.Male.FirstNames">
            <summary>
            Gets all the male first names possibly used by the lib.
            </summary>
        </member>
        <member name="T:Diverse.Person">
            <summary>
            Represent a <see cref="T:Diverse.Person"/> with some common characteristics.
            Very useful to test most of the applications dealing with humans.
            </summary>
        </member>
        <member name="P:Diverse.Person.FirstName">
            <summary>
            Gets the first name of the <see cref="T:Diverse.Person"/> instance.
            </summary>
        </member>
        <member name="P:Diverse.Person.LastName">
            <summary>
            Gets the last name of the <see cref="T:Diverse.Person"/> instance.
            </summary>
        </member>
        <member name="P:Diverse.Person.Gender">
            <summary>
            Gets the gender of the <see cref="T:Diverse.Person"/> instance.
            </summary>
        </member>
        <member name="P:Diverse.Person.Title">
            <summary>
            Gets the title of the <see cref="T:Diverse.Person"/> instance.
            </summary>
        </member>
        <member name="P:Diverse.Person.EMail">
            <summary>
            Gets the email of the <see cref="T:Diverse.Person"/> instance.
            </summary>
        </member>
        <member name="P:Diverse.Person.IsMarried">
            <summary>
            Gets whether or not the <see cref="T:Diverse.Person"/> instance is married.
            </summary>
        </member>
        <member name="P:Diverse.Person.Age">
            <summary>
            Gets the age of the <see cref="T:Diverse.Person"/> instance.
            </summary>
        </member>
        <member name="P:Diverse.Person.Address">
            <summary>
            Gets the <see cref="P:Diverse.Person.Address"/> of this <see cref="T:Diverse.Person"/> instance.
            </summary>
        </member>
        <member name="M:Diverse.Person.ToString">
            <summary>
            Returns this instance of <see cref="T:System.String"/>.
            </summary>
            <returns>The current string./</returns>
        </member>
        <member name="T:Diverse.PersonFuzzer">
            <summary>
            Fuzz <see cref="T:Diverse.Person"/>.
            </summary>
        </member>
        <member name="M:Diverse.PersonFuzzer.#ctor(Diverse.IFuzz)">
            <summary>
            Instantiates a <see cref="T:Diverse.PersonFuzzer"/>.
            </summary>
            <param name="fuzzer">Instance of <see cref="T:Diverse.IFuzz"/> to use.</param>
        </member>
        <member name="M:Diverse.PersonFuzzer.GenerateFirstName(System.Nullable{Diverse.Gender})">
            <summary>
            Generates a 'Diverse' first name (i.e. from all around the world and different cultures).
            </summary>
            <param name="gender">The <see cref="T:Diverse.Gender"/> to be used as indication (optional).</param>
            <returns>A 'Diverse' first name.</returns>
        </member>
        <member name="M:Diverse.PersonFuzzer.GenerateLastName(System.String)">
            <summary>
            Generates a 'Diverse' first name (i.e. from all around the world and different cultures).
            </summary>
            <param name="firstName">The first name of this person.</param>
            <returns>A 'Diverse' last name.</returns>
        </member>
        <member name="M:Diverse.PersonFuzzer.GeneratePerson(System.Nullable{Diverse.Gender})">
            <summary>
            Generates a 'Diverse' <see cref="T:Diverse.Person"/> (i.e. from all around the world and different cultures). 
            </summary>
            <param name="gender">The (optional) <see cref="T:Diverse.Gender"/> of this <see cref="T:Diverse.Person"/></param>
            <returns>A 'Diverse' <see cref="T:Diverse.Person"/> instance.</returns>
        </member>
        <member name="M:Diverse.PersonFuzzer.GenerateAge">
            <summary>
            Generates the number of year to be associated with a person.
            </summary>
            <returns>The number of year to be associated with a person.</returns>
        </member>
        <member name="M:Diverse.PersonFuzzer.GenerateEMail(System.String,System.String)">
            <summary>
            Generates a random Email.
            </summary>
            <param name="firstName">The (optional) first name for this Email</param>
            <param name="lastName">The (option) last name for this Email.</param>
            <returns>A random Email.</returns>
        </member>
        <member name="M:Diverse.PersonFuzzer.GeneratePassword(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Generates a password following some common rules asked on the internet.
            </summary>
            <returns>The generated password</returns>
        </member>
        <member name="T:Diverse.Tech">
            <summary>
            Information related to tech things.
            </summary>
        </member>
        <member name="P:Diverse.Tech.EmailDomainNames">
            <summary>
            Gets a list of domain names for emails (e.g.: protonmail.com, yahoo.fr, etc).
            </summary>
        </member>
        <member name="T:Diverse.Strings.Adjectives">
            <summary>
            Contains all the adjectives used by the library.
            </summary>
        </member>
        <member name="P:Diverse.Strings.Adjectives.PerFeeling">
            <summary>
            Gets a dictionary of all the adjective per <see cref="T:Diverse.Strings.Feeling"/>.
            </summary>
        </member>
        <member name="T:Diverse.Strings.Feeling">
            <summary>
            Feeling.
            </summary>
        </member>
        <member name="F:Diverse.Strings.Feeling.Positive">
            <summary>
            Positive <see cref="T:Diverse.Strings.Feeling"/>.
            </summary>
        </member>
        <member name="F:Diverse.Strings.Feeling.Negative">
            <summary>
            Negative <see cref="T:Diverse.Strings.Feeling"/>.
            </summary>
        </member>
        <member name="T:Diverse.Strings.Latin">
            <summary>
            Latin words.
            </summary>
        </member>
        <member name="T:Diverse.Strings.LoremFuzzer">
            <summary>
            Fuzz texts in Latin (see. Lorem Ipsum... https://www.lipsum.com/).
            </summary>
        </member>
        <member name="M:Diverse.Strings.LoremFuzzer.#ctor(Diverse.IFuzz)">
            <summary>
            Instantiates a <see cref="T:Diverse.Strings.LoremFuzzer"/>.
            </summary>
            <param name="fuzzer">Instance of <see cref="T:Diverse.IFuzz"/> to use.</param>
        </member>
        <member name="P:Diverse.Strings.LoremFuzzer.Alphabet">
            <summary>
            Gets the letters used by the <see cref="M:Diverse.Strings.LoremFuzzer.GenerateLetter"/> method.
            </summary>
        </member>
        <member name="M:Diverse.Strings.LoremFuzzer.GenerateWords(System.Nullable{System.Int32})">
            <summary>
            Generates random latin words.
            </summary>
            <param name="number">(optional) Number of words to generate.</param>
            <returns>The generated latin words.</returns>
        </member>
        <member name="M:Diverse.Strings.LoremFuzzer.GenerateSentence(System.Nullable{System.Int32})">
            <summary>
            Generate a sentence in latin.
            </summary>
            <param name="nbOfWords">(optional) Number of words for this sentence.</param>
            <returns>The generated sentence in latin.</returns>
        </member>
        <member name="M:Diverse.Strings.LoremFuzzer.GenerateParagraph(System.Nullable{System.Int32})">
            <summary>
            Generate a paragraph in latin.
            </summary>
            <param name="nbOfSentences">(optional) Number of sentences for this paragraph.</param>
            <returns>The generated paragraph in latin.</returns>
        </member>
        <member name="M:Diverse.Strings.LoremFuzzer.GenerateParagraphs(System.Nullable{System.Int32})">
            <summary>
            Generates a collection of paragraphs. 
            </summary>
            <param name="nbOfParagraphs">(optional) Number of paragraphs to generate.</param>
            <returns>The collection of paragraphs.</returns>
        </member>
        <member name="M:Diverse.Strings.LoremFuzzer.GenerateText(System.Nullable{System.Int32})">
            <summary>
            Generates a text in latin with a specified number of paragraphs.
            </summary>
            <param name="nbOfParagraphs">(optional) Number of paragraphs to generate.</param>
            <returns>The generated text in latin.</returns>
        </member>
        <member name="M:Diverse.Strings.LoremFuzzer.GenerateLetter">
            <summary>
            Generates a random letter.
            </summary>
            <returns>The generated letter.</returns>
        </member>
        <member name="T:Diverse.Strings.StringFuzzer">
            <summary>
            Fuzz <see cref="T:System.String"/> values.
            </summary>
        </member>
        <member name="M:Diverse.Strings.StringFuzzer.#ctor(Diverse.IFuzz)">
            <summary>
            Instantiates a <see cref="T:Diverse.Strings.StringFuzzer"/>.
            </summary>
            <param name="fuzzer">Instance of <see cref="T:Diverse.IFuzz"/> to use.</param>
        </member>
        <member name="M:Diverse.Strings.StringFuzzer.GenerateAdjective(System.Nullable{Diverse.Strings.Feeling})">
            <summary>
            Generates a random adjective based on a feeling.
            </summary>
            <param name="feeling">The expected feeling of the adjective</param>
            <returns>An adjective based on a particular feeling or random one if not provided</returns>
        </member>
        <member name="M:Diverse.Strings.StringFuzzer.GenerateStringFromPattern(System.String)">
            <summary>
            Generates a string from a given 'diverse' format.
            </summary>
            <param name="diverseFormat">The 'diverse' format to use.</param>
            <returns>A randomly generated string followin the 'diverse' format.</returns>
        </member>
        <member name="T:Diverse.Types">
            <summary>
            List a set of Types that are...
            </summary>
        </member>
        <member name="F:Diverse.Types.CoveredByAFuzzer">
            <summary>
            Gets a set of <see cref="T:System.Type"/> that are covered by a Fuzzer.
            </summary>
        </member>
        <member name="T:Diverse.ReflectionExtensions">
            <summary>
            Extension methods related to the usage of Reflection.
            </summary>
        </member>
        <member name="M:Diverse.ReflectionExtensions.IsCoveredByAFuzzer(System.Type)">
            <summary>
            Gets a value indicating whether a given <see cref="T:System.Type"/> is already covered by the lib for Fuzzing.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check.</param>
            <returns><b>true</b> if the <see cref="T:System.Type"/> is already covered by the lib for Fuzzing, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Diverse.ReflectionExtensions.IsEnumerable(System.Type)">
            <summary>
            Gets a value indicating whether a given <see cref="T:System.Type"/> is <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check.</param>
            <returns><b>true</b> if the <see cref="T:System.Type"/> is a <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Diverse.ReflectionExtensions.IsEmpty(System.Reflection.ConstructorInfo)">
            <summary>
            Gets a value indicated whether a given <see cref="T:System.Reflection.ConstructorInfo"/> has no parameter defined.
            </summary>
            <param name="constructor">The <see cref="T:System.Reflection.ConstructorInfo"/> to check absence of parameters for.</param>
            <returns><b>true</b> if the <see cref="T:System.Reflection.ConstructorInfo"/> has no parameter defined, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Diverse.ReflectionExtensions.GetConstructorWithBiggestNumberOfParameters(System.Type)">
            <summary>
            Gets the constructor with the biggest number of Parameters of a <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The considered <see cref="T:System.Type"/>.</param>
            <returns>The <see cref="T:System.Reflection.ConstructorInfo"/> which has the biggest number of Parameters defined for this <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:Diverse.ReflectionExtensions.GetConstructorsOrderedByNumberOfParametersDesc(System.Type)">
            <summary>
            Gets all the constructors of a <see cref="T:System.Type"/> ordered by their number of parameters desc.
            </summary>
            <param name="type">The considered <see cref="T:System.Type"/>.</param>
            <returns>All the constructors of a <see cref="T:System.Type"/> ordered by their number of parameters desc.</returns>
        </member>
        <member name="T:Diverse.TypeFuzzer">
            <summary>
            Fuzz instance of Types.
            </summary>
        </member>
        <member name="M:Diverse.TypeFuzzer.#ctor(Diverse.IFuzz)">
            <summary>
            Instantiates a <see cref="T:Diverse.TypeFuzzer"/>.
            </summary>
            <param name="fuzzer">Instance of <see cref="T:Diverse.IFuzz"/> to use.</param>
        </member>
        <member name="M:Diverse.TypeFuzzer.GenerateInstanceOf``1">
            <summary>
            Generates an instance of a type T.
            </summary>
            <returns>An instance of type T with some fuzzed properties.</returns>
        </member>
        <member name="M:Diverse.TypeFuzzer.GenerateEnum``1">
            <summary>
            Generates an instance of an <see cref="T:System.Enum"/> type.
            </summary>
            <typeparam name="T">Type of the <see cref="T:System.Enum"/></typeparam>
            <returns>An random value of the specified <see cref="T:System.Enum"/> type.</returns>
        </member>
    </members>
</doc>
